(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Ball, Coord, Game, Player, game;

console.log('hello phaser');

Coord = (function() {
  function Coord(x, y) {
    this.x = x;
    this.y = y;
  }

  return Coord;

})();

Player = (function() {
  function Player(game, id, avatar) {
    this.game = game;
    this.id = id;
    this.avatar = avatar;
    this.bucket = this.game.plateforms.create(0, 0, 'ground');
    this.bucket.physicsBodyType = Phaser.Physics.P2JS;
    this.bucket.playerParent = this;
    this.bucket.scale.setTo(0.3, 2);
    this.bucket.body.immovable = true;
    this.score = 0;
    this.scoreText = null;
  }

  Player.prototype.captureBall = function(ball) {
    ball.kill();
    this.score += 10;
    return this.displayScore();
  };

  Player.prototype.displayScore = function() {
    return this.scoreText.setText("player " + this.id + ": " + this.score);
  };

  return Player;

})();

Ball = (function() {
  function Ball(balls, coord, score, type) {
    var star;
    this.balls = balls;
    this.coord = coord;
    this.score = score;
    this.type = type;
    star = this.balls.create(this.coord, 0, 'star');
  }

  return Ball;

})();

Game = (function() {
  var GameStatus;

  GameStatus = {
    INIT: 1,
    RUNNING: 2,
    SCORE: 3
  };

  function Game(status, players) {
    var self;
    this.status = status;
    this.players = players;
    this.balls = null;
    this.plateforms = null;
    this.walls = null;
    this.players = [];
    self = this;
    this.phaser = new Phaser.Game(1200, 680, Phaser.AUTO, '', {
      preload: (function() {
        return self.preload();
      }),
      create: (function() {
        return self.create();
      }),
      update: (function() {
        return self.update();
      }),
      render: (function() {
        return self.render();
      })
    });
  }

  Game.prototype.generate_fake_player = function() {
    var i, x, y, _i, _results;
    x = y = 0;
    _results = [];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      _results.push(this.players.push(new Player(this, i, null)));
    }
    return _results;
  };

  Game.prototype.generate_fake_balls = function() {
    var ball, i, rd, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 12; i = ++_i) {
      rd = Math.random();
      if (0.95 < rd) {
        ball = new Ball(this.balls, i * 80, 10, 'facecat');
        _results.push(ball.physicsBodyType = Phaser.Physics.P2JS);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Game.prototype.set_players_position = function() {
    var max_space_player, nbr_player, player, pointer, _i, _len, _ref, _results;
    nbr_player = this.players.length;
    max_space_player = this.phaser.width / (nbr_player + 1);
    _ref = this.players;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      player.bucket.width = max_space_player - 10;
      pointer = max_space_player + player.id * max_space_player - (max_space_player / 2);
      player.bucket.x = max_space_player + player.id * max_space_player - (max_space_player / 2);
      player.bucket.y = this.phaser.world.height - 64;
      _results.push(player.scoreText = this.phaser.add.text(pointer, 16, '', {
        font: '32px arial',
        fill: '#fff'
      }));
    }
    return _results;
  };

  Game.prototype.preload = function() {
    console.log(':preload');
    this.phaser.load.image('sky', '/assets/images/sky.png');
    this.phaser.load.image('ground', '/assets/images/platform.png');
    this.phaser.load.image('circle', '/assets/images/circle.png');
    this.phaser.load.image('star', '/assets/images/star.png');
    return this.phaser.load.image('wall', '/assets/images/star.png');
  };

  Game.prototype.create = function() {
    console.log(':create');
    this.phaser.physics.startSystem(Phaser.Physics.P2JS);
    this.phaser.physics.p2.gravity.y = 500;
    this.phaser.add.sprite(0, 0, 'sky');
    this.plateforms = this.phaser.add.group();
    this.plateforms.enableBody = true;
    this.generate_fake_player();
    this.set_players_position();
    this.balls = this.phaser.add.group();
    this.balls.enableBody = true;
    this.balls.physicsBodyType = Phaser.Physics.P2JS;
    this.walls = this.phaser.add.group();
    this.walls.enableBody = true;
    this.walls.physicsBodyType = Phaser.Physics.P2JS;
    this.new_line = new Phaser.Line(0, 0, 0, 0);
    return this.phaser.input.onDown.add(this.click, this);
  };

  Game.prototype.collectBalls = function(plateform, ball) {
    return plateform.playerParent.captureBall(ball);
  };

  Game.prototype.buildCircle = function(wall) {
    var wall_sprite;
    wall_sprite = this.walls.create(wall.x, wall.y, 'circle');
    this.phaser.physics.p2.enable(wall_sprite, false);
    wall_sprite.body.data.motionState = p2.Body.STATIC;
    return wall_sprite.body.data.gravityScale = 0;
  };

  Game.prototype.update = function() {
    this.generate_fake_balls();
    if (this.dragging) {
      return console.log('push line !');
    }
  };

  Game.prototype.render = function() {};

  Game.prototype.click = function(pointer) {
    return this.buildCircle(pointer);
  };

  return Game;

})();

game = new Game();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
