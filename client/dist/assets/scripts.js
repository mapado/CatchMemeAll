(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Coord, Game, Player, game;

console.log('hello phaser');

Coord = (function() {
  function Coord(x, y) {
    this.x = x;
    this.y = y;
  }

  return Coord;

})();

Player = (function() {
  function Player(game, id, score) {
    var ground;
    this.game = game;
    this.id = id;
    this.score = score;
    ground = platforms.create((this.game.phaser.world.width / this.game.players.length) * id, this.game.phaser.world.height - 64, 'ground');
    ground.scale.setTo(0.3, 2);
    ground.body.immovable = true;
  }

  return Player;

})();

Game = (function() {
  var GameStatus;

  GameStatus = {
    INIT: 1,
    RUNNING: 2,
    SCORE: 3
  };

  function Game(status, players) {
    this.status = status;
    this.players = players;
    this.window_x = 1200;
    this.window_y = 680;
    this.stars = null;
    this.scoreText = null;
    this.score = 0;
    this.players = [];
    this.phaser = new Phaser.Game(this.window_x, this.window_y, Phaser.AUTO, '', {
      preload: this.preload,
      create: this.create,
      update: this.update
    });
    this.generate_fake_player();
    this.platforms = this.phaser.add.group();
  }

  Game.prototype.generate_fake_player = function() {
    var i, x, y, _i, _results;
    x = y = 0;
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      _results.push(this.players.push(new Player(this.game, i, 0)));
    }
    return _results;
  };

  Game.prototype.preload = function() {
    console.log(':preload');
    console.log(this);
    this.load.image('sky', '/assets/images/sky.png');
    this.load.image('ground', '/assets/images/platform.png');
    return this.load.image('star', '/assets/images/star.png');
  };

  Game.prototype.create = function() {
    var i, scoreText, star, stars, _i;
    console.log(':create');
    this.phaser.add.sprite(0, 0, 'sky');
    this.phaser.add.sprite(0, 0, 'star');
    stars = this.phaser.add.group();
    for (i = _i = 0; _i <= 12; i = ++_i) {
      star = stars.create(i * 70, 0, 'star');
      star.body.gravity.y = 6;
      star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }
    return scoreText = this.phaser.add.text(16, 16, 'score: 0', {
      font: '32px arial',
      fill: '#000'
    });
  };

  Game.prototype.collectStar = function(player, star) {
    star.kill();
    score += 10;
    return scoreText.content = "Score: " + score;
  };

  Game.prototype.update = function() {
    this.phaser.physics.collide(stars, platforms);
    return this.phaser.physics.overlap(stars, collectStar, null, this);
  };

  return Game;

})();

game = new Game();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
