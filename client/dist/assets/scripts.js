(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Ball, Coord, Game, Player, game;

console.log('hello phaser');

Coord = (function() {
  function Coord(x, y) {
    this.x = x;
    this.y = y;
  }

  return Coord;

})();

Player = (function() {
  function Player(game, id, avatar) {
    this.game = game;
    this.id = id;
    this.avatar = avatar;
    this.bucket = this.game.plateforms.create(0, 0, 'ground');
    this.bucket.playerParent = this;
    this.bucket.enableBody = true;
    this.bucket.scale.setTo(0.3, 2);
    this.bucket.body.immovable = true;
    this.score = 0;
    this.scoreText = null;
  }

  Player.prototype.captureBall = function(ball) {
    ball.kill();
    this.score += 10;
    return this.displayScore();
  };

  Player.prototype.displayScore = function() {
    return this.scoreText.setText("player " + this.id + ": " + this.score);
  };

  return Player;

})();

Ball = (function() {
  function Ball(balls, coord, score, type) {
    var star;
    this.balls = balls;
    this.coord = coord;
    this.score = score;
    this.type = type;
    star = this.balls.create(this.coord, 0, 'star');
    star.body.gravity.y = 500;
    star.body.bounce.y = 0.7;
  }

  return Ball;

})();

Game = (function() {
  var GameStatus;

  GameStatus = {
    INIT: 1,
    RUNNING: 2,
    SCORE: 3
  };

  function Game(status, players) {
    var self;
    this.status = status;
    this.players = players;
    this.balls = null;
    this.plateforms = null;
    this.players = [];
    self = this;
    this.phaser = new Phaser.Game(1200, 680, Phaser.AUTO, '', {
      preload: (function() {
        return self.preload();
      }),
      create: (function() {
        return self.create();
      }),
      update: (function() {
        return self.update();
      }),
      render: (function() {
        return self.render();
      })
    });
    this.socket = io.connect('http://vader.mapado.com');
    this.socket.on('welcome', (function(data) {
      return console.log(data);
    }));
    this.socket.on('new player', (function(data) {
      return console.log(data);
    }));
    this.socket.on('character spawned', (function(data) {
      return console.log(data);
    }));
    this.socket.on('game stop', (function() {
      return console.log("GAME STOP");
    }));
  }

  Game.prototype.generate_fake_player = function() {
    var i, x, y, _i, _results;
    x = y = 0;
    _results = [];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      _results.push(this.players.push(new Player(this, i, null)));
    }
    return _results;
  };

  Game.prototype.generate_fake_balls = function() {
    var i, rd, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 12; i = ++_i) {
      rd = Math.random();
      if (0.95 < rd) {
        _results.push(new Ball(this.balls, i * 80, 10, 'facecat'));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Game.prototype.set_players_position = function() {
    var max_space_player, nbr_player, player, pointer, _i, _len, _ref, _results;
    nbr_player = this.players.length;
    max_space_player = this.phaser.width / (nbr_player + 1);
    _ref = this.players;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      player = _ref[_i];
      player.bucket.width = max_space_player - 10;
      pointer = max_space_player + player.id * max_space_player - (max_space_player / 2);
      player.bucket.x = max_space_player + player.id * max_space_player - (max_space_player / 2);
      player.bucket.y = this.phaser.world.height - 64;
      _results.push(player.scoreText = this.phaser.add.text(pointer, 16, '', {
        font: '32px arial',
        fill: '#fff'
      }));
    }
    return _results;
  };

  Game.prototype.preload = function() {
    console.log(':preload');
    this.phaser.load.image('sky', '/assets/images/sky.png');
    this.phaser.load.image('ground', '/assets/images/platform.png');
    return this.phaser.load.image('star', '/assets/images/star.png');
  };

  Game.prototype.create = function() {
    console.log(':create');
    this.phaser.add.sprite(0, 0, 'sky');
    this.plateforms = this.phaser.add.group();
    this.plateforms.enableBody = true;
    this.generate_fake_player();
    this.set_players_position();
    this.balls = this.phaser.add.group();
    this.balls.enableBody = true;
    this.new_line = new Phaser.Line(0, 0, 0, 0);
    return this.phaser.input.onDown.add(this.click, this);
  };

  Game.prototype.collectBalls = function(plateform, ball) {
    return plateform.playerParent.captureBall(ball);
  };

  Game.prototype.update = function() {
    this.phaser.physics.arcade.overlap(this.plateforms, this.balls, this.collectBalls, null, this);
    this.phaser.physics.arcade.collide(this.balls, this.new_line);
    this.generate_fake_balls();
    if (this.dragging) {
      if (this.phaser.input.activePointer.isDown) {
        return this.new_line.end.set(this.phaser.input.activePointer.x, this.phaser.input.activePointer.y);
      } else {
        this.dragging = false;
        return console.log('push line !');
      }
    }
  };

  Game.prototype.render = function() {
    this.phaser.debug.geom(this.new_line);
    return this.phaser.debug.rectangle(this.new_line);
  };

  Game.prototype.click = function(pointer) {
    this.dragging = true;
    return this.new_line.start.set(pointer.x, pointer.y);
  };

  return Game;

})();

game = new Game();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9lcGkvQnVyZWF1L1NhdmVUaGVJbnRlcm5ldC9jbGllbnQvbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL2hvbWUvZXBpL0J1cmVhdS9TYXZlVGhlSW50ZXJuZXQvY2xpZW50L3NjcmlwdHMvY29mZmVlL2FwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLCtCQUFBOztBQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksY0FBWixDQUFBLENBQUE7O0FBQUE7QUFLaUIsRUFBQSxlQUFFLENBQUYsRUFBTSxDQUFOLEdBQUE7QUFBVSxJQUFULElBQUMsQ0FBQSxJQUFBLENBQVEsQ0FBQTtBQUFBLElBQUwsSUFBQyxDQUFBLElBQUEsQ0FBSSxDQUFWO0VBQUEsQ0FBYjs7ZUFBQTs7SUFMSixDQUFBOztBQUFBO0FBUWlCLEVBQUEsZ0JBQUUsSUFBRixFQUFTLEVBQVQsRUFBYyxNQUFkLEdBQUE7QUFDVCxJQURVLElBQUMsQ0FBQSxPQUFBLElBQ1gsQ0FBQTtBQUFBLElBRGlCLElBQUMsQ0FBQSxLQUFBLEVBQ2xCLENBQUE7QUFBQSxJQURzQixJQUFDLENBQUEsU0FBQSxNQUN2QixDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQWpCLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLFFBQTlCLENBQVYsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUFSLEdBQXVCLElBRHZCLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxNQUFNLENBQUMsVUFBUixHQUFxQixJQUZyQixDQUFBO0FBQUEsSUFHQSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFkLENBQW9C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Q0FBa0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQTlDLEVBQWlELElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUE3RSxFQURGO09BQUEsTUFBQTtBQUlFLFFBQUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxLQUFaLENBQUE7ZUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLGFBQVosRUFMRjtPQURKO0tBTk07RUFBQSxDQS9FUixDQUFBOztBQUFBLGlCQTZGQSxNQUFBLEdBQVEsU0FBQSxHQUFBO0FBQ04sSUFBQSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFkLENBQW1CLElBQUMsQ0FBQSxRQUFwQixDQUFBLENBQUE7V0FDQSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFkLENBQXdCLElBQUMsQ0FBQSxRQUF6QixFQUZNO0VBQUEsQ0E3RlIsQ0FBQTs7QUFBQSxpQkFpR0EsS0FBQSxHQUFPLFNBQUMsT0FBRCxHQUFBO0FBQ0wsSUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZLElBQVosQ0FBQTtXQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQWhCLENBQW9CLE9BQU8sQ0FBQyxDQUE1QixFQUErQixPQUFPLENBQUMsQ0FBdkMsRUFGSztFQUFBLENBakdQLENBQUE7O2NBQUE7O0lBakNKLENBQUE7O0FBQUEsSUFzSUEsR0FBVyxJQUFBLElBQUEsQ0FBQSxDQXRJWCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjb25zb2xlLmxvZyAnaGVsbG8gcGhhc2VyJ1xuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY2xhc3MgQ29vcmRcbiAgICBjb25zdHJ1Y3RvcjogKEB4LCBAeSkgLT5cblxuY2xhc3MgUGxheWVyXG4gICAgY29uc3RydWN0b3I6IChAZ2FtZSwgQGlkLCBAYXZhdGFyKSAtPlxuICAgICAgICBAYnVja2V0ID0gQGdhbWUucGxhdGVmb3Jtcy5jcmVhdGUgMCwgMCwgJ2dyb3VuZCdcbiAgICAgICAgQGJ1Y2tldC5wbGF5ZXJQYXJlbnQgPSB0aGlzXG4gICAgICAgIEBidWNrZXQuZW5hYmxlQm9keSA9IHRydWVcbiAgICAgICAgQGJ1Y2tldC5zY2FsZS5zZXRUbyAwLjMsIDJcbiAgICAgICAgQGJ1Y2tldC5ib2R5LmltbW92YWJsZSA9IHRydWVcbiAgICAgICAgQHNjb3JlID0gMFxuICAgICAgICBAc2NvcmVUZXh0ID0gbnVsbFxuXG4gICAgY2FwdHVyZUJhbGw6IChiYWxsKSAtPlxuICAgICAgICBiYWxsLmtpbGwoKVxuICAgICAgICBAc2NvcmUgKz0gMTBcbiAgICAgICAgQGRpc3BsYXlTY29yZSgpXG5cbiAgICBkaXNwbGF5U2NvcmU6ICgpIC0+XG4gICAgICAgIEBzY29yZVRleHQuc2V0VGV4dCBcInBsYXllciAje0BpZH06ICN7QHNjb3JlfVwiXG5cbmNsYXNzIEJhbGxcbiAgICBjb25zdHJ1Y3RvcjogKEBiYWxscywgQGNvb3JkLCBAc2NvcmUsIEB0eXBlKSAtPlxuICAgICAgICBzdGFyID0gQGJhbGxzLmNyZWF0ZSBAY29vcmQsIDAsICdzdGFyJ1xuICAgICAgICBzdGFyLmJvZHkuZ3Jhdml0eS55ID0gNTAwXG4gICAgICAgIHN0YXIuYm9keS5ib3VuY2UueSA9IDAuN1xuXG5cbmNsYXNzIEdhbWVcbiAgICBHYW1lU3RhdHVzID1cbiAgICAgICAgSU5JVCA6IDFcbiAgICAgICAgUlVOTklORyA6IDJcbiAgICAgICAgU0NPUkUgOiAzXG5cbiAgICBjb25zdHJ1Y3RvcjogKEBzdGF0dXMsIEBwbGF5ZXJzKSAtPlxuICAgICAgICAjIGJhc2ljIGNvbmZpZ1xuICAgICAgICBAYmFsbHMgPSBudWxsXG4gICAgICAgIEBwbGF0ZWZvcm1zID0gbnVsbFxuICAgICAgICBAcGxheWVycyA9IFtdXG4gICAgICAgICMgR2VuZXJhdGUgdGhlIHdvcmRcbiAgICAgICAgc2VsZiA9IHRoaXNcbiAgICAgICAgQHBoYXNlciA9IG5ldyBQaGFzZXIuR2FtZShcbiAgICAgICAgICAgIDEyMDAsXG4gICAgICAgICAgICA2ODAsXG4gICAgICAgICAgICBQaGFzZXIuQVVUTyxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgcHJlbG9hZDooIC0+IHNlbGYucHJlbG9hZCgpKSxcbiAgICAgICAgICAgIGNyZWF0ZTogKCAtPiBzZWxmLmNyZWF0ZSgpKSxcbiAgICAgICAgICAgIHVwZGF0ZTogKC0+IHNlbGYudXBkYXRlKCkpLFxuICAgICAgICAgICAgcmVuZGVyOiAoLT4gc2VsZi5yZW5kZXIoKSlcbiAgICAgICAgKVxuXG4gICAgICAgIEBzb2NrZXQgPSBpby5jb25uZWN0ICdodHRwOi8vdmFkZXIubWFwYWRvLmNvbSdcbiAgICAgICAgQHNvY2tldC5vbignd2VsY29tZScsICAoKGRhdGEpIC0+IGNvbnNvbGUubG9nIGRhdGEpKVxuICAgICAgICBAc29ja2V0Lm9uKCduZXcgcGxheWVyJywgKChkYXRhKSAtPiBjb25zb2xlLmxvZyBkYXRhKSlcbiAgICAgICAgQHNvY2tldC5vbignY2hhcmFjdGVyIHNwYXduZWQnLCAoKGRhdGEpIC0+IGNvbnNvbGUubG9nIGRhdGEpKVxuICAgICAgICBAc29ja2V0Lm9uKCdnYW1lIHN0b3AnLCAoLT4gY29uc29sZS5sb2cgXCJHQU1FIFNUT1BcIiApKVxuXG4gICAgZ2VuZXJhdGVfZmFrZV9wbGF5ZXI6ICgpIC0+XG4gICAgICAgIHggPSB5ID0gMFxuICAgICAgICBmb3IgaSBpbiBbMC4uNF1cbiAgICAgICAgICAgIEBwbGF5ZXJzLnB1c2gobmV3IFBsYXllcih0aGlzLCBpLCBudWxsKSlcblxuICAgIGdlbmVyYXRlX2Zha2VfYmFsbHM6ICgpIC0+XG4gICAgICAgIGZvciBpIGluIFswLi4xMl1cbiAgICAgICAgICAgIHJkID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAgICAgaWYgMC45NSAgPCByZFxuICAgICAgICAgICAgICAgIG5ldyBCYWxsKEBiYWxscywgaSo4MCwgMTAsICdmYWNlY2F0JylcblxuICAgIHNldF9wbGF5ZXJzX3Bvc2l0aW9uOiAoKSAtPlxuICAgICAgICBuYnJfcGxheWVyID0gQHBsYXllcnMubGVuZ3RoXG4gICAgICAgIG1heF9zcGFjZV9wbGF5ZXIgPSBAcGhhc2VyLndpZHRoIC8gKG5icl9wbGF5ZXIgKyAxKVxuICAgICAgICBmb3IgcGxheWVyICBpbiBAcGxheWVyc1xuICAgICAgICAgICAgcGxheWVyLmJ1Y2tldC53aWR0aCA9IG1heF9zcGFjZV9wbGF5ZXIgLSAxMFxuICAgICAgICAgICAgcG9pbnRlciA9IG1heF9zcGFjZV9wbGF5ZXIgKyBwbGF5ZXIuaWQgKiBtYXhfc3BhY2VfcGxheWVyIC0gKG1heF9zcGFjZV9wbGF5ZXIgLyAyKVxuICAgICAgICAgICAgcGxheWVyLmJ1Y2tldC54ID0gIG1heF9zcGFjZV9wbGF5ZXIgKyBwbGF5ZXIuaWQgKiBtYXhfc3BhY2VfcGxheWVyIC0gKG1heF9zcGFjZV9wbGF5ZXIgLyAyKVxuICAgICAgICAgICAgcGxheWVyLmJ1Y2tldC55ID0gIEBwaGFzZXIud29ybGQuaGVpZ2h0IC0gNjRcbiAgICAgICAgICAgIHBsYXllci5zY29yZVRleHQgPSBAcGhhc2VyLmFkZC50ZXh0IHBvaW50ZXIsIDE2LCAnJywgZm9udDogJzMycHggYXJpYWwnLCBmaWxsOiAnI2ZmZidcblxuXG4gICAgcHJlbG9hZDogKCkgLT5cbiAgICAgIGNvbnNvbGUubG9nICc6cHJlbG9hZCdcbiAgICAgIEBwaGFzZXIubG9hZC5pbWFnZSAnc2t5JywgJy9hc3NldHMvaW1hZ2VzL3NreS5wbmcnXG4gICAgICBAcGhhc2VyLmxvYWQuaW1hZ2UgJ2dyb3VuZCcsICcvYXNzZXRzL2ltYWdlcy9wbGF0Zm9ybS5wbmcnXG4gICAgICBAcGhhc2VyLmxvYWQuaW1hZ2UgJ3N0YXInLCAnL2Fzc2V0cy9pbWFnZXMvc3Rhci5wbmcnXG5cbiAgICBjcmVhdGU6ICgpIC0+XG4gICAgICBjb25zb2xlLmxvZyAnOmNyZWF0ZSdcbiAgICAgIEBwaGFzZXIuYWRkLnNwcml0ZSAwLCAwLCAnc2t5J1xuXG4gICAgICBAcGxhdGVmb3JtcyA9IEBwaGFzZXIuYWRkLmdyb3VwKClcbiAgICAgIEBwbGF0ZWZvcm1zLmVuYWJsZUJvZHkgPSB0cnVlXG5cbiAgICAgIEBnZW5lcmF0ZV9mYWtlX3BsYXllcigpXG5cbiAgICAgIEBzZXRfcGxheWVyc19wb3NpdGlvbigpXG5cbiAgICAgICNjdXJzb3JzID0gQHBoYXNlci5pbnB1dC5rZXlib2FyZC5jcmVhdGVDdXJzb3JLZXlzKClcbiAgICAgIEBiYWxscyA9IEBwaGFzZXIuYWRkLmdyb3VwKClcbiAgICAgIEBiYWxscy5lbmFibGVCb2R5ID0gdHJ1ZTtcbiAgICAgIFxuICAgICAgQG5ld19saW5lID0gbmV3IFBoYXNlci5MaW5lIDAsIDAsIDAsIDBcbiAgICAgIEBwaGFzZXIuaW5wdXQub25Eb3duLmFkZChAY2xpY2ssIHRoaXMpXG5cblxuICAgIGNvbGxlY3RCYWxsczogKHBsYXRlZm9ybSwgYmFsbCkgLT5cbiAgICAgIHBsYXRlZm9ybS5wbGF5ZXJQYXJlbnQuY2FwdHVyZUJhbGwoYmFsbClcblxuICAgIHVwZGF0ZTogKCkgLT5cbiAgICAgIEBwaGFzZXIucGh5c2ljcy5hcmNhZGUub3ZlcmxhcCBAcGxhdGVmb3JtcywgQGJhbGxzLCBAY29sbGVjdEJhbGxzLCBudWxsLCB0aGlzXG4gICAgICBAcGhhc2VyLnBoeXNpY3MuYXJjYWRlLmNvbGxpZGUgQGJhbGxzLCBAbmV3X2xpbmVcblxuICAgICAgQGdlbmVyYXRlX2Zha2VfYmFsbHMoKVxuXG4gICAgICBpZiBAZHJhZ2dpbmdcbiAgICAgICAgICBpZiBAcGhhc2VyLmlucHV0LmFjdGl2ZVBvaW50ZXIuaXNEb3duXG4gICAgICAgICAgICBAbmV3X2xpbmUuZW5kLnNldCBAcGhhc2VyLmlucHV0LmFjdGl2ZVBvaW50ZXIueCwgQHBoYXNlci5pbnB1dC5hY3RpdmVQb2ludGVyLnlcblxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBkcmFnZ2luZyA9IGZhbHNlXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAncHVzaCBsaW5lICEnXG5cbiAgICByZW5kZXI6ICgpIC0+XG4gICAgICBAcGhhc2VyLmRlYnVnLmdlb20gQG5ld19saW5lXG4gICAgICBAcGhhc2VyLmRlYnVnLnJlY3RhbmdsZSBAbmV3X2xpbmVcblxuICAgIGNsaWNrOiAocG9pbnRlcikgLT5cbiAgICAgIEBkcmFnZ2luZyA9IHRydWVcbiAgICAgIEBuZXdfbGluZS5zdGFydC5zZXQgcG9pbnRlci54LCBwb2ludGVyLnlcblxuZ2FtZSA9IG5ldyBHYW1lKClcbiJdfQ==
