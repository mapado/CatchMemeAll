(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Ball, Coord, Game, Player, game;

console.log('hello phaser');

Coord = (function() {
  function Coord(x, y) {
    this.x = x;
    this.y = y;
  }

  return Coord;

})();

Player = (function() {
  function Player(game, id, avatar) {
    var max_space_player, nbr_player, pointer, x, y;
    this.game = game;
    this.id = id;
    this.avatar = avatar;
    nbr_player = 5;
    max_space_player = this.game.phaser.width / (nbr_player + 1);
    pointer = max_space_player + this.id * max_space_player - (max_space_player / 2);
    x = max_space_player + this.id * max_space_player - (max_space_player / 2);
    y = this.game.phaser.world.height - 25;
    this.bucket = this.game.buckets.create(x, y, 'ground');
    this.bucket.width = max_space_player - 10;
    this.bucket.body.data.motionState = p2.Body.STATIC;
    this.bucket.body.uuid = this.id;
    this.bucket.playerParent = this;
    this.bucket.scale.setTo(0.3, 2);
    this.score = 0;
    this.scoreText = this.game.phaser.add.text(pointer, 16, '', {
      font: '32px arial',
      fill: '#fff'
    });
  }

  Player.prototype.addScore = function(score) {
    this.score += score;
    return this.scoreText.setText("player " + this.id + ": " + this.score);
  };

  return Player;

})();

Ball = (function() {
  function Ball(game, coord, score, type) {
    this.game = game;
    this.coord = coord;
    this.score = score;
    this.type = type;
    this.ball = this.game.balls.create(this.coord, 0, 'star');
    this.ball.physicsBodyType = Phaser.Physics.P2JS;
    this.ball.body.onBeginContact.add(this.captureBall, this);
  }

  Ball.prototype.captureBall = function(k) {
    if (k.sprite.key === 'ground') {
      this.game.players[k.uuid].addScore(this.score);
      return this.ball.kill();
    }
  };

  return Ball;

})();

Game = (function() {
  var GameStatus;

  GameStatus = {
    INIT: 1,
    RUNNING: 2,
    SCORE: 3
  };

  function Game(status, players) {
    var self;
    this.status = status;
    this.players = players;
    this.balls = null;
    this.buckets = null;
    this.colliders = null;
    this.players = {};
    self = this;
    this.phaser = new Phaser.Game(1200, 680, Phaser.AUTO, '', {
      preload: (function() {
        return self.preload();
      }),
      create: (function() {
        return self.create();
      }),
      update: (function() {
        return self.update();
      }),
      render: (function() {
        return self.render();
      })
    });
    this.socket = socket;
    this.socket.on('new player', (function(data) {
      return console.log(data);
    }));
    this.socket.on('character spawned', (function(data) {
      return console.log(data);
    }));
    this.socket.on('game stop', (function() {
      return console.log("GAME STOP");
    }));
  }

  Game.prototype.generate_fake_player = function() {
    var uuid, x, y, _i, _results;
    x = y = 0;
    _results = [];
    for (uuid = _i = 0; _i <= 4; uuid = ++_i) {
      _results.push(this.players[uuid] = new Player(this, uuid, null));
    }
    return _results;
  };

  Game.prototype.generate_fake_balls = function() {
    var ball, i, rd, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 12; i = ++_i) {
      rd = Math.random();
      if (0.95 < rd) {
        _results.push(ball = new Ball(this, i * 80, 10, 'facecat'));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Game.prototype.preload = function() {
    console.log(':preload');
    this.phaser.load.image('sky', '/assets/images/sky.png');
    this.phaser.load.image('ground', '/assets/images/platform.png');
    this.phaser.load.image('circle', '/assets/images/circle.png');
    this.phaser.load.image('star', '/assets/images/star.png');
    return this.phaser.load.image('wall', '/assets/images/star.png');
  };

  Game.prototype.create = function() {
    console.log(':create');
    this.phaser.physics.startSystem(Phaser.Physics.P2JS);
    this.phaser.physics.p2.gravity.y = 500;
    this.phaser.add.sprite(0, 0, 'sky');
    this.buckets = this.phaser.add.group();
    this.buckets.enableBody = true;
    this.buckets.physicsBodyType = Phaser.Physics.P2JS;
    this.generate_fake_player();
    this.balls = this.phaser.add.group();
    this.balls.enableBody = true;
    this.balls.physicsBodyType = Phaser.Physics.P2JS;
    this.colliders = this.phaser.add.group();
    this.colliders.enableBody = true;
    this.colliders.physicsBodyType = Phaser.Physics.P2JS;
    this.new_line = new Phaser.Line(0, 0, 0, 0);
    return this.phaser.input.onDown.add(this.click, this);
  };

  Game.prototype.collectBalls = function(plateform, ball) {
    return plateform.playerParent.captureBall(ball);
  };

  Game.prototype.buildCollider = function(wall) {
    var wall_sprite;
    wall_sprite = this.colliders.create(wall.x, wall.y, 'circle');
    this.phaser.physics.p2.enable(wall_sprite, false);
    wall_sprite.body.data.motionState = p2.Body.STATIC;
    return wall_sprite.body.data.gravityScale = 0;
  };

  Game.prototype.update = function() {
    return this.generate_fake_balls();
  };

  Game.prototype.render = function() {};

  Game.prototype.click = function(pointer) {
    return this.buildCollider(pointer);
  };

  return Game;

})();

game = new Game();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
